name: Build, Tag, Push, and Deploy Frontend Service

permissions:
  id-token: write   # Required to request the JWT token for OIDC
  contents: read    # Required to read repository contents (checkout)
  packages: write 
  

on:
  workflow_dispatch:
    inputs:
      branch:
        description: "Branch to run the workflow on"
        required: true
        default: "main"

jobs:
  build-and-deploy:
    name: Build, Tag, Push, and Deploy Frontend Service
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code from the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Configure AWS credentials using OIDC
      - name: Configure AWS credentials with OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}  # The ARN of the IAM role with ECS and ECR permissions
          aws-region: ${{ secrets.AWS_REGION }}

      # Step 3: Verify AWS credentials
      - name: Verify AWS credentials
        run: |
          aws sts get-caller-identity

      # Step 4: Login to Amazon ECR
      - name: Login to Amazon ECR
        id: login-ecr
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}


      - name: Determine new image tag
        id: versioning
        run: |
                LATEST_TAG=$(aws ecr describe-images \
                --repository-name "${{ secrets.ECR_REPOSITORY }}" \
                --region "${{ secrets.AWS_REGION }}" \
                --query 'imageDetails[*].imageTags' \
                --output text | tr '\t' '\n' | grep -E '^dev-ui\.v[0-9]+(\.[0-9]+)*$' | sort -V | tail -n1)

                # Debug log
                echo "Fetched latest tag: $LATEST_TAG"
    
                # If no images exist, start from v1.0
                if [[ -z "$LATEST_TAG" ]]; then
                  LATEST_TAG="dev-ui.v1.0"
                fi
    
                # Extract the current major version
                if [[ "$LATEST_TAG" =~ dev-ui\.v([0-9]+) ]]; then
                  CURRENT_MAJOR=${BASH_REMATCH[1]}
                else
                  echo "Error: Unable to extract version from tag $LATEST_TAG"
                  exit 1
                fi
    
                # Increment the major version
                CURRENT_MAJOR=$((CURRENT_MAJOR + 1))
    
                # Create the new version tag
                NEW_TAG="dev-ui.v${CURRENT_MAJOR}.0"
    
                # Output the new tag for GitHub Actions
                echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV
                echo "New version tag: $NEW_TAG"

      # Step 6: Build, tag, and push Docker image
      - name: Build, tag, and push Docker image
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          NEW_TAG: ${{ env.NEW_TAG }}
        run: |
          # Ensure NEW_TAG is not empty
          if [[ -z "$NEW_TAG" ]]; then
            echo "ERROR: NEW_TAG is empty. Exiting." >&2
            exit 1
          fi
      
          # Ensure registry and repository are set
          if [[ -z "$ECR_REGISTRY" || -z "$ECR_REPOSITORY" ]]; then
            echo "ERROR: ECR_REGISTRY or ECR_REPOSITORY is empty. Exiting." >&2
            exit 1
          fi
      
          # Ensure no newline characters in variables
          ECR_REGISTRY=$(echo -n "$ECR_REGISTRY" | tr -d '\n')
          ECR_REPOSITORY=$(echo -n "$ECR_REPOSITORY" | tr -d '\n')
      
          IMAGE_URI="${ECR_REGISTRY}/${ECR_REPOSITORY}:${NEW_TAG}"
          echo "Building Docker image: $IMAGE_URI"
      
          # Build Docker image
          docker build -t "$IMAGE_URI" . 
          if [ $? -ne 0 ]; then
            echo "Docker build failed" && exit 1
          fi
      
          # Push Docker image
          docker push "$IMAGE_URI"
          if [ $? -ne 0 ]; then
            echo "Docker push failed" && exit 1
          fi
      
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV

      # Step 7: Install jq
      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq


     # Step 8: Update ECS Task Definition with new image URI
      - name: Update ECS Task Definition Revision
        id: update-task-def
        run: |
          set -e  # Stop script on error
      
          echo "Fetching existing task definition..."
          EXISTING_TASK_DEF=$(aws ecs describe-task-definition \
            --task-definition ui \
            --query "taskDefinition" \
            --output json 2>&1) || { echo "Error fetching task definition: $EXISTING_TASK_DEF"; exit 1; }
      
          echo "Task definition retrieved successfully."
      
          # Update the image URI in the task definition
          UPDATED_TASK_DEF=$(echo "$EXISTING_TASK_DEF" | jq \
            --arg IMAGE_URI "$IMAGE_URI" \
            '.containerDefinitions[0].image = $IMAGE_URI | 
             { 
               family, 
               executionRoleArn, 
               networkMode, 
               containerDefinitions, 
               volumes, 
               placementConstraints, 
               requiresCompatibilities, 
               cpu, 
               memory, 
               runtimePlatform
             }') || { echo "Error processing task definition with jq."; exit 1; }
      
          echo "Updated task definition with new image URI: $IMAGE_URI"
      
          # Register the updated task definition using the JSON string directly
          REGISTERED_TASK_DEF=$(aws ecs register-task-definition \
            --cli-input-json "$UPDATED_TASK_DEF" \
            --query "taskDefinition.taskDefinitionArn" \
            --output text 2>&1) || { echo "Error registering task definition: $REGISTERED_TASK_DEF"; exit 1; }
      
          echo "Task definition registered with ARN: $REGISTERED_TASK_DEF"
      
          # Set the output variable for use in the next step
          echo "task_def_arn=$REGISTERED_TASK_DEF" >> $GITHUB_ENV
      
      
      # Step 9: Deploy to ECS Frontend Service
      - name: Deploy to ECS Frontend Service
        run: |
          set -e  # Stop script on error
      
          # Ensure task definition ARN is available from the environment variable
          if [ -z "${{ env.task_def_arn }}" ]; then
            echo "Error: task_def_arn is missing from previous step output."
            exit 1
          fi
      
          echo "Using new task definition ARN: ${{ env.task_def_arn }}"
      
          # Update the ECS service with the new task definition ARN
          UPDATE_OUTPUT=$(aws ecs update-service \
            --cluster ${{ secrets.ECS_CLUSTER }} \
            --service ${{ secrets.ECS_SERVICE }} \
            --task-definition "${{ env.task_def_arn }}" \
            --force-new-deployment 2>&1) || { echo "Error updating ECS service: $UPDATE_OUTPUT"; exit 1; }
      
          echo "ECS service updated successfully!"
